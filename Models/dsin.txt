#1
char Aclass(3,24)
Adymosim
1.4
Modelica experiment file


#    Experiment parameters
double experiment(7,1)
       0                   # StartTime    Time at which integration starts
                           #              (and linearization and trimming time)
      10                   # StopTime     Time at which integration stops
       0                   # Increment    Communication step size, if > 0
     500                   # nInterval    Number of communication intervals, if > 0
  1.0000000000000000E-04   # Tolerance    Relative precision of signals for
                           #              simulation, linearization and trimming
       0                   # MaxFixedStep Maximum step size of fixed step size
                           #              integrators, if > 0.0
       8                   # Algorithm    Integration algorithm as integer (1...28)
                           #
                           #             | model|       |        | dense | state |
                           # Algorithm   | typ  | stiff | order  | output| event |
                           # ------------+------+-------+--------+-------+-------+
                           #  1 | deabm  |  ode |   no  |  1-12  |  yes  |   no  |
                           #  2 | lsode1 |  ode |   no  |  1-12  |  yes  |   no  |
                           #  3 | lsode2 |  ode |  yes  |  1-5   |  yes  |   no  |
                           #  4 | lsodar |  ode |  both |1-12,1-5|  yes  |  yes  |
                           #  5 | dopri5 |  ode |   no  |   5    |   no  |   no  |
                           #  6 | dopri8 |  ode |   no  |   8    |   no  |   no  |
                           #  7 | grk4t  |  ode |  yes  |   4    |   no  |   no  |
                           #  8 | dassl  |  dae |  yes  |  1-5   |  yes  |  yes  |
                           #  9 | odassl | hdae |  yes  |  1-5   |  yes  |  yes  |
                           # 10 | mexx   | hdae |   no  |  2-24  |   no  |   no  |
                           # 11 | euler  |  ode |   no  |   1    |   no  |  yes  |
                           # 12 | rkfix2 |  ode |   no  |   2    |   no  |  yes  |
                           # 13 | rkfix3 |  ode |   no  |   3    |   no  |  yes  |
                           # 14 | rkfix4 |  ode |   no  |   4    |   no  |  yes  |
                           #>=14| others |  ode |yes/no |  2-5   |   yes |  yes  |
                           # ---+--------+------+-------+--------+-------+-------+
                           # euler and rkfix have fixed stepsize.


#    Method tuning parameters
double method(27,1)
       1                   # grid     type of communication time grid, defined by
                           #          = 1: equidistant points ("Increment/nInterval")
                           #          = 2: vector of grid points ("tgrid")
                           #          = 3: variable step integrator (automatically)
                           #          = 4: model (call of "increment" in Dymola, e.g.
                           #                      incr=Time > 2 then 0 else 0.1
                           #                      dummy=increment(incr))
                           #          grid = 1,3 is stopped by "StopTime"
                           #          grid = 2   is stopped by "tgrid(last)"
                           #          grid = 4   runs forever (stopped by model)
       1                   # nt       Use every NT time instant, if grid = 3
       3                   # dense    1/2/3 restart/step/interpolate GRID points
       1                   # evgrid   0/1 do not/save event points in comm. time grid
       1                   # evu      0/1 U-discontinuity does not/trigger events
       0                   # evuord       U-discontinuity order to consider (0,1,...)
       0                   # error    0/1/2 One message/warning/error messages
       0                   # jac      0/1 Compute jacobian numerically/by BLOCKJ
       0                   # xd0c     0/1 Compute/set XD0
       0                   # f3       0/1 Ignore/use F3 of HDAE (= index 1)
       0                   # f4       0/1 Ignore/use F4 of HDAE (= index 2)
       0                   # f5       0/1 Ignore/use F5 of HDAE (= invar.)
       0                   # debug    flags for debug information (1<<0 uses pdebug) 
     100                   # pdebug       priority of debug information (1...100)
       0                   # fmax     Maximum number of evaluations of BLOCKF, if > 0
       0                   # ordmax   Maximum allowed integration order, if > 0
       0                   # hmax     Maximum absolute stepsize, if > 0
       0                   # hmin     Minimum absolute stepsize, if > 0 (use with care!)
       0                   # h0       Stepsize to be attempted on first step, if > 0
  2.0000000000000000E-14   # teps     Bound to check, if 2 equal time instants
  1.0000000000000000E-10   # eveps    Hysteresis epsilon at event points
      20                   # eviter   Maximum number of event iterations
  9.9999999999999995E-07   # delaym   Minimum time increment in delay buffers
       1                   # fexcep   0/1 floating exception crashes/stops dymosim
       1                   # tscale   clock-time = tscale*simulation-time, if grid = 5
                           #          > 1: simulation too slow
                           #          = 1: simulation-time = real-time
                           #          < 1: simulation too fast
       1                   # shared   (not used)
    2473                   # memkey   (not used)


#    Output parameters
int settings(13,1)
 0                         # lprec    0/1 do not/store result data in double
 1                         # lx       0/1 do not/store x  (state variables)
 1                         # lxd      0/1 do not/store xd (derivative of states)
 1                         # lu       0/1 do not/store u  (input     signals)
 1                         # ly       0/1 do not/store y  (output    signals)
 0                         # lz       0/1 do not/store z  (indicator signals)
 1                         # lw       0/1 do not/store w  (auxiliary signals)
 1                         # la       0/1 do not/store a  (alias     signals)
 0                         # lperf    0/1 do not/store performance indicators
 0                         # levent   0/1 do not/store event point
 1                         # lres     0/1 do not/store results on result file
 0                         # lshare   0/1 do not/store info data for shared memory on dsshare.txt
 1                         # lform    0/1 ASCII/Matlab-binary storage format of results
                           #              (for simulation/linearization; not for trimming)


#    Names of initial variables
char initialName(121,78)
SysData.S_b
SysData.fn
PowerFlow.voltage.InfiniteBusV_0
PowerFlow.voltage.InfiniteBusangle_0
PowerFlow.voltage.BreakerenableTrigger
PowerFlow.voltage.TransformerB3B4m
PowerFlow.voltage.GeneratorV_0
PowerFlow.voltage.Generatorangle_0
PowerFlow.voltage.MotorV_0
PowerFlow.voltage.Motorangle_0
PowerFlow.voltage.PQLoadV_0
PowerFlow.voltage.PQLoadangle_0
PowerFlow.power.InfiniteBusP_0
PowerFlow.power.InfiniteBusQ_0
PowerFlow.power.GeneratorP_0
PowerFlow.power.GeneratorQ_0
PowerFlow.power.PQLoadP_0
PowerFlow.power.PQLoadQ_0
PowerFlow.power.MotorP_0
PowerFlow.power.MotorQ_0
PowerFlow.power.ShuntCapacitorQnom
recordReferenceRelay.add.u1
recordReferenceRelay.add.u2
recordReferenceRelay.add.y
recordReferenceRelay.add.k1
recordReferenceRelay.add.k2
recordReferenceRelay.greater1.y
recordReferenceRelay.booleanToReal1.u
recordReferenceRelay.booleanToReal1.realTrue
recordReferenceRelay.booleanToReal1.realFalse
recordReferenceRelay.booleanToReal1.y
recordReferenceRelay.const.k
recordReferenceRelay.timer.clock.offset
recordReferenceRelay.timer.clock.startTime
recordReferenceRelay.timer.clock.y
recordReferenceRelay.timer.add.u1
recordReferenceRelay.timer.add.u2
recordReferenceRelay.timer.add.k1
recordReferenceRelay.timer.add.k2
recordReferenceRelay.timer.const.k
recordReferenceRelay.timer.product.y
recordReferenceRelay.timer.clock1.offset
recordReferenceRelay.timer.clock1.startTime
recordReferenceRelay.timer.greaterEqualThreshold.threshold
recordReferenceRelay.timer.greaterEqualThreshold.y
recordReferenceRelay.timer.const1.k
recordReferenceRelay.Is
recordReferenceRelay.TripSingal
recordReferenceRelay.greater2.u2
recordReferenceRelay.greater2.y
recordReferenceRelay.alpha
recordReferenceRelay.TMS
recordReferenceRelay.C
recordReferenceRelay.calculatingOperationTime.Const.k
recordReferenceRelay.calculatingOperationTime.division1.y
recordReferenceRelay.calculatingOperationTime.pickcupcurrent.k
recordReferenceRelay.calculatingOperationTime.const2.k
recordReferenceRelay.calculatingOperationTime.add.u1
recordReferenceRelay.calculatingOperationTime.add.y
recordReferenceRelay.calculatingOperationTime.add.k1
recordReferenceRelay.calculatingOperationTime.add.k2
recordReferenceRelay.calculatingOperationTime.product.u1
recordReferenceRelay.calculatingOperationTime.TimeMultiplierSetting.k
recordReferenceRelay.calculatingOperationTime.const.k
recordReferenceRelay.calculatingOperationTime.alpha
recordReferenceRelay.calculatingOperationTime.TMS
recordReferenceRelay.calculatingOperationTime.C
recordReferenceRelay.calculatingOperationTime.eps
recordReferenceRelay.calculatingOperationTime.Is
recordReferenceRelay.calculatingOperationTime.amp
recordReferenceRelay.calculatingOperationTime.division.y
recordReferenceRelay.calculatingOperationTime.const4.k
recordReferenceRelay.calculatingOperationTime.product1.u1
recordReferenceRelay.calculatingOperationTime.product1.u2
recordReferenceRelay.calculatingOperationTime.switch1.u2
recordReferenceRelay.calculatingOperationTime.greaterEqualThreshold.threshold
recordReferenceRelay.calculatingOperationTime.greaterEqualThreshold.y
recordReferenceRelay.calculatingOperationTime.lessEqualThreshold.threshold
recordReferenceRelay.calculatingOperationTime.lessEqualThreshold.y
recordReferenceRelay.calculatingOperationTime.const1.k
recordReferenceRelay.calculatingOperationTime.switch2.u2
recordReferenceRelay.calculatingOperationTime.greaterEqualThreshold1.threshold
recordReferenceRelay.calculatingOperationTime.greaterEqualThreshold1.y
recordReferenceRelay.calculatingOperationTime.lessEqualThreshold1.threshold
recordReferenceRelay.calculatingOperationTime.lessEqualThreshold1.y
recordReferenceRelay.calculatingOperationTime.const3.k
recordReferenceRelay.rSFlipFlop.Qini
recordReferenceRelay.rSFlipFlop.QI
recordReferenceRelay.rSFlipFlop.pre.pre_u_start
recordReferenceRelay.rSFlipFlop.pre.u
recordReferenceRelay.booleanConstant.k
recordReferenceRelay.rSFlipFlop1.Qini
recordReferenceRelay.rSFlipFlop1.QI
recordReferenceRelay.rSFlipFlop1.pre.pre_u_start
recordReferenceRelay.rSFlipFlop1.pre.u
recordReferenceRelay.booleanConstant1.k
recordReferenceRelay.u
recordReferenceRelay.eps
recordReferenceRelay.extractingTimeOfFault.switch1.u2
recordReferenceRelay.extractingTimeOfFault.switch1.y
recordReferenceRelay.extractingTimeOfFault.const.k
recordReferenceRelay.extractingTimeOfFault.const1.k
recordReferenceRelay.extractingTimeOfFault.greaterEqualThreshold.threshold
recordReferenceRelay.extractingTimeOfFault.integrator.k
recordReferenceRelay.extractingTimeOfFault.integrator.initType
recordReferenceRelay.extractingTimeOfFault.integrator.y_start
recordReferenceRelay.extractingTimeOfFault.integrator.y
recordReferenceRelay.extractingTimeOfFault.integrator.der(y)
booleanStep.startTime
booleanStep.startValue
booleanStep.y
booleanToReal.realTrue
booleanToReal.realFalse
booleanToReal.y
RelayData.alpha.alpha
RelayData.c.C
add.u1
add.k1
add.k2
const.k
const1.k

double initialValue(121,6)
 -1     750                  0  0  1  280   # SysData.S_b
 -1      50                  0  0  1  280   # SysData.fn
 -1  1.0600000000000001E+00  0  0  1  280   # PowerFlow.voltage.InfiniteBusV_0
 -1       0                  0  0  1  280   # PowerFlow.voltage.InfiniteBusangle_0
 -1       0                  0  0  1  281   # PowerFlow.voltage.BreakerenableTrigger
 -1    9999                  0  0  1  280   # PowerFlow.voltage.TransformerB3B4m
 -1  1.0400000000000000E+00  0  0  1  280   # PowerFlow.voltage.GeneratorV_0
 -1  8.8000000000000007E+00  0  0  1  280   # PowerFlow.voltage.Generatorangle_0
 -1  1.0078000000000000E+00  0  0  1  280   # PowerFlow.voltage.MotorV_0
 -1  4.9000000000000004E+00  0  0  1  280   # PowerFlow.voltage.Motorangle_0
 -1  1.0674999999999999E+00  0  0  1  280   # PowerFlow.voltage.PQLoadV_0
 -1  4.7000000000000002E+00  0  0  1  280   # PowerFlow.voltage.PQLoadangle_0
 -1    -350                  0  0  1  280   # PowerFlow.power.InfiniteBusP_0
 -1     -16                  0  0  1  280   # PowerFlow.power.InfiniteBusQ_0
 -1     450                  0  0  1  280   # PowerFlow.power.GeneratorP_0
 -1      99                  0  0  1  280   # PowerFlow.power.GeneratorQ_0
 -1     100                  0  0  1  280   # PowerFlow.power.PQLoadP_0
 -1      20                  0  0  1  280   # PowerFlow.power.PQLoadQ_0
 -1       0                  0  0  1  280   # PowerFlow.power.MotorP_0
 -1       0                  0  0  1  280   # PowerFlow.power.MotorQ_0
 -1     117                  0  0  1  280   # PowerFlow.power.ShuntCapacitorQnom
  0       0                  0  0  6  256   # recordReferenceRelay.add.u1
  0       0                  0  0  6  256   # recordReferenceRelay.add.u2
  0       0                  0  0  6  256   # recordReferenceRelay.add.y
 -1      -1                  0  0  1  280   # recordReferenceRelay.add.k1
 -1       1                  0  0  1  280   # recordReferenceRelay.add.k2
  0       0                  0  0  6  321   # recordReferenceRelay.greater1.y
  0       0                  0  0  6  321   # recordReferenceRelay.booleanToReal1.u
 -1       1                  0  0  1  280   # recordReferenceRelay.booleanToReal1.realTrue
 -1       0                  0  0  1  280   # recordReferenceRelay.booleanToReal1.realFalse
  0       0                  0  0  6  320   # recordReferenceRelay.booleanToReal1.y
  0       1                  0  0  6  256   # recordReferenceRelay.const.k
 -1       0                  0  0  1  280   # recordReferenceRelay.timer.clock.offset
 -1       0                  0  0  1  280   # recordReferenceRelay.timer.clock.startTime
  0       0                  0  0  6  256   # recordReferenceRelay.timer.clock.y
  0       0                  0  0  6  256   # recordReferenceRelay.timer.add.u1
  0       0                  0  0  6  256   # recordReferenceRelay.timer.add.u2
 -1       1                  0  0  1  280   # recordReferenceRelay.timer.add.k1
 -1       1                  0  0  1  280   # recordReferenceRelay.timer.add.k2
 -1      -1                  0  0  1  280   # recordReferenceRelay.timer.const.k
  0       0                  0  0  6  256   # recordReferenceRelay.timer.product.y
 -1       0                  0  0  1  280   # recordReferenceRelay.timer.clock1.offset
 -1       0                  0  0  1  280   # recordReferenceRelay.timer.clock1.startTime
 -1  9.0000000000000002E-01  0  0  1  280   # recordReferenceRelay.timer.greaterEqualThreshold.threshold
  0       0                  0  0  6  321   # recordReferenceRelay.timer.greaterEqualThreshold.y
 -1       0                  0  0  1  280   # recordReferenceRelay.timer.const1.k
 -1     400                  0  0  1  280   # recordReferenceRelay.Is
  0       0                  0  0  6  321   # recordReferenceRelay.TripSingal
  0       0                  0  0  6  320   # recordReferenceRelay.greater2.u2
  0       0                  0  0  6  321   # recordReferenceRelay.greater2.y
  0       0                  0  0  6  256   # recordReferenceRelay.alpha
 -1  5.0000000000000000E-01  0  0  1  280   # recordReferenceRelay.TMS
  0       0                  0  0  6  256   # recordReferenceRelay.C
  0       1                  0  0  6  256   # recordReferenceRelay.calculatingOperationTime.Const.k
  0       0                  0  0  6  320   # recordReferenceRelay.calculatingOperationTime.division1.y
  0       1                  0  0  6  256   # recordReferenceRelay.calculatingOperationTime.pickcupcurrent.k
 -1       1                  0  0  1  280   # recordReferenceRelay.calculatingOperationTime.const2.k
  0       0                  0  0  6  320   # recordReferenceRelay.calculatingOperationTime.add.u1
  0       0                  0  0  6  320   # recordReferenceRelay.calculatingOperationTime.add.y
 -1       1                  0  0  1  280   # recordReferenceRelay.calculatingOperationTime.add.k1
 -1      -1                  0  0  1  280   # recordReferenceRelay.calculatingOperationTime.add.k2
  0       0                  0  0  6  320   # recordReferenceRelay.calculatingOperationTime.product.u1
 -1  5.0000000000000000E-01  0  0  1  280   # recordReferenceRelay.calculatingOperationTime.TimeMultiplierSetting.k
  0       1                  0  0  6  256   # recordReferenceRelay.calculatingOperationTime.const.k
  0       0                  0  0  6  256   # recordReferenceRelay.calculatingOperationTime.alpha
  0       0                  0  0  6  256   # recordReferenceRelay.calculatingOperationTime.TMS
  0       0                  0  0  6  256   # recordReferenceRelay.calculatingOperationTime.C
  0       0                  0  0  6  256   # recordReferenceRelay.calculatingOperationTime.eps
  0       0                  0  0  6  256   # recordReferenceRelay.calculatingOperationTime.Is
  0       0                  0  0  6  258   # recordReferenceRelay.calculatingOperationTime.amp
  0       0                  0  0  6  320   # recordReferenceRelay.calculatingOperationTime.division.y
 -1       1                  0  0  1  280   # recordReferenceRelay.calculatingOperationTime.const4.k
  0       0                  0  0  6  320   # recordReferenceRelay.calculatingOperationTime.product1.u1
  0       0                  0  0  6  320   # recordReferenceRelay.calculatingOperationTime.product1.u2
  0       0                  0  0  6  321   # recordReferenceRelay.calculatingOperationTime.switch1.u2
 -1       0                  0  0  1  280   # recordReferenceRelay.calculatingOperationTime.greaterEqualThreshold.threshold
  0       0                  0  0  6  321   # recordReferenceRelay.calculatingOperationTime.greaterEqualThreshold.y
 -1       0                  0  0  1  280   # recordReferenceRelay.calculatingOperationTime.lessEqualThreshold.threshold
  0       0                  0  0  6  321   # recordReferenceRelay.calculatingOperationTime.lessEqualThreshold.y
 -1       1                  0  0  1  280   # recordReferenceRelay.calculatingOperationTime.const1.k
  0       0                  0  0  6  321   # recordReferenceRelay.calculatingOperationTime.switch2.u2
 -1       0                  0  0  1  280   # recordReferenceRelay.calculatingOperationTime.greaterEqualThreshold1.threshold
  0       0                  0  0  6  321   # recordReferenceRelay.calculatingOperationTime.greaterEqualThreshold1.y
 -1       0                  0  0  1  280   # recordReferenceRelay.calculatingOperationTime.lessEqualThreshold1.threshold
  0       0                  0  0  6  321   # recordReferenceRelay.calculatingOperationTime.lessEqualThreshold1.y
 -1       0                  0  0  1  280   # recordReferenceRelay.calculatingOperationTime.const3.k
 -1       0                  0  0  1  281   # recordReferenceRelay.rSFlipFlop.Qini
  0       0                  0  0  6  321   # recordReferenceRelay.rSFlipFlop.QI
  0       0                  0  0  6  257   # recordReferenceRelay.rSFlipFlop.pre.pre_u_start
  0       0                  0  0  6  321   # recordReferenceRelay.rSFlipFlop.pre.u
 -1       0                  0  0  1  281   # recordReferenceRelay.booleanConstant.k
 -1       0                  0  0  1  281   # recordReferenceRelay.rSFlipFlop1.Qini
  0       0                  0  0  6  321   # recordReferenceRelay.rSFlipFlop1.QI
  0       0                  0  0  6  257   # recordReferenceRelay.rSFlipFlop1.pre.pre_u_start
  0       0                  0  0  6  321   # recordReferenceRelay.rSFlipFlop1.pre.u
 -1       0                  0  0  1  281   # recordReferenceRelay.booleanConstant1.k
  0       0                  0  0  6  320   # recordReferenceRelay.u
 -1  4.0999999999999998E-01  0  0  1  280   # recordReferenceRelay.eps
  0       0                  0  0  6  321   # recordReferenceRelay.extractingTimeOfFault.switch1.u2
  0       0                  0  0  6  320   # recordReferenceRelay.extractingTimeOfFault.switch1.y
 -1       0                  0  0  1  280   # recordReferenceRelay.extractingTimeOfFault.const.k
 -1       1                  0  0  1  280   # recordReferenceRelay.extractingTimeOfFault.const1.k
 -1  9.0000000000000002E-01  0  0  1  280   # recordReferenceRelay.extractingTimeOfFault.greaterEqualThreshold.threshold
 -1       1                  0  0  1  280   # recordReferenceRelay.extractingTimeOfFault.integrator.k
  0       3                  1  4  6  258   # recordReferenceRelay.extractingTimeOfFault.integrator.initType
 -1       0                  0  0  1  280   # recordReferenceRelay.extractingTimeOfFault.integrator.y_start
 -1       0                  0  0  2  272   # recordReferenceRelay.extractingTimeOfFault.integrator.y
  0       0                  0  0  3  256   # recordReferenceRelay.extractingTimeOfFault.integrator.der(y)
 -1       7                  0  0  1  280   # booleanStep.startTime
 -1       0                  0  0  1  281   # booleanStep.startValue
  0       0                  0  0  6  321   # booleanStep.y
 -1       1                  0  0  1  280   # booleanToReal.realTrue
 -1       0                  0  0  1  280   # booleanToReal.realFalse
  0       0                  0  0  6  320   # booleanToReal.y
 -1  2.0000000000000000E-02  0  0  1  280   # RelayData.alpha.alpha
 -1  1.4000000000000001E-01  0  0  1  280   # RelayData.c.C
  0       0                  0  0  6  320   # add.u1
 -1       1                  0  0  1  280   # add.k1
 -1       1                  0  0  1  280   # add.k2
 -1  2.9999999999999999E-01  0  0  1  280   # const.k
 -1  1.0133333000000000E+07  0  0  1  280   # const1.k


# Matrix with 6 columns defining the initial value calculation
# (columns 5 and 6 are not utilized for the calculation but are
#  reported by dymosim via dymosim -i for user convenience):
#
# column 1: Type of initial value
#           = -2: special case: for continuing simulation (column 2 = value)
#           = -1: fixed value (column 2 = fixed value)
#           =  0: free value, i.e., no restriction (column 2 = initial value)
#           >  0: desired value (column 1 = weight for optimization
#                                column 2 = desired value)
#                 use weight=1, since automatic scaling usually
#                 leads to equally weighted terms
# column 2: fixed, free or desired value according to column 1.
# column 3: Minimum value (ignored, if Minimum >= Maximum).
# column 4: Maximum value (ignored, if Minimum >= Maximum).
#           Minimum and maximum restrict the search range in initial
#           value calculation. They might also be used for scaling.
# column 5: Category of variable.
#           = 1: parameter.
#           = 2: state.
#           = 3: state derivative.
#           = 4: output.
#           = 5: input.
#           = 6: auxiliary variable.
# column 6: Data type of variable and flags according to dsBaseType
#  <value>&3= 0: real.
#  <value>&3= 1: boolean.
#  <value>&3= 2: integer.
#
# Initial values are calculated according to the following procedure:
#
# - If parameters, states and inputs are FIXED, and other variables
#   are FREE, no special action takes place (default setting).
#
# - If there are only FIXED and FREE variables and the number of
#   FREE parameters, states and inputs is IDENTICAL to the number of
#   FIXED state derivatives, outputs and auxiliary variables, a non-linear
#   equation is solved to determine a consistent set of initial conditions.
#
# - In all other cases the following optimization problem is solved:
#      min( sum( weight(i)*( (value(i) - DESIRED(i))/scale(i) )^2 ) )
#   under the constraint that the differential equation is fulfilled
#   at the initial time. In most cases weight(i)=1 is sufficient, due
#   to the automatic scaling (if DESIRED(i) is not close to zero,
#   scale(i) = DESIRED(i). Otherwise, the scaling is based on the
#   nominal value (and maybe minimum and maximum values given in 
#   column 3 and 4). If these values are zero, scale(i)=1 is used).
#
char initialDescription(121,111)
System base [MVA]
System Frequency [Hz]


[:#(type=Boolean)]
















Connector of Real input signal 1
Connector of Real input signal 2
Connector of Real output signal
Gain of upper input
Gain of lower input
Connector of Boolean output signal [:#(type=Boolean)]
Connector of Boolean input signal [:#(type=Boolean)]
Output signal for true Boolean input
Output signal for false Boolean input
Connector of Real output signal
Constant output value
Offset of output signal [s]
Output = offset for time < startTime [s]
Connector of Real output signal [s]
Connector of Real input signal 1
Connector of Real input signal 2 [s]
Gain of upper input
Gain of lower input
Constant output value
Connector of Real output signal
Offset of output signal [s]
Output = offset for time < startTime [s]
Comparison with respect to threshold
Connector of Boolean output signal [:#(type=Boolean)]
Constant output value
Pick Up Current Value
[:#(type=Boolean)]
Connector of second Boolean input signal
Connector of Boolean output signal [:#(type=Boolean)]
Alpha Constant Value
TMS Constant Value
C Constant Value
Constant output value
Connector of Real output signal
Constant output value
Constant output value
Connector of Real input signal 1
Connector of Real output signal
Gain of upper input
Gain of lower input
Connector of Real input signal 1
Constant output value
Constant output value
Constant output value
Constant output value
Constant output value
Constant output value
Constant output value
[:#(type=Integer)]
Connector of Real output signal
Constant output value
Connector of Real input signal 1
Connector of Real input signal 2
Connector of Boolean input signal [:#(type=Boolean)]
Comparison with respect to threshold
Connector of Boolean output signal [:#(type=Boolean)]
Comparison with respect to threshold
Connector of Boolean output signal [:#(type=Boolean)]
Constant output value
Connector of Boolean input signal [:#(type=Boolean)]
Comparison with respect to threshold
Connector of Boolean output signal [:#(type=Boolean)]
Comparison with respect to threshold
Connector of Boolean output signal [:#(type=Boolean)]
Constant output value
Start value of Q at initial time [:#(type=Boolean)]
[:#(type=Boolean)]
Start value of pre(u) at initial time [:#(type=Boolean)]
Connector of Boolean input signal [:#(type=Boolean)]
Constant output value [:#(type=Boolean)]
Start value of Q at initial time [:#(type=Boolean)]
[:#(type=Boolean)]
Start value of pre(u) at initial time [:#(type=Boolean)]
Connector of Boolean input signal [:#(type=Boolean)]
Constant output value [:#(type=Boolean)]

Constant output value
Connector of Boolean input signal [:#(type=Boolean)]
Connector of Real output signal
Constant output value
Constant output value
Comparison with respect to threshold
Integrator gain [1]
Type of initialization (1: no init, 2: steady state, 3,4: initial output) [:#(type=Modelica.Blocks.Types.Init)]
Initial or guess value of output (= state)
Connector of Real output signal
der(Connector of Real output signal)
Time instant of step start [s]
Output before startTime [:#(type=Boolean)]
Connector of Boolean output signal [:#(type=Boolean)]
Output signal for true Boolean input
Output signal for false Boolean input
Connector of Real output signal


Connector of Real input signal 1
Gain of upper input
Gain of lower input
Constant output value
Constant output value

